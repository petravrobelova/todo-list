{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","this","props","item","handleChange","handleSubmit","editItem","className","onSubmit","type","placeholder","value","onChange","Component","TodoItem","title","handleDelete","handleEdit","onClick","TodoList","items","clearList","map","key","id","App","state","uuid","e","setState","target","preventDefault","newItem","updatedItems","filteredItems","filter","selectedItem","find","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PAEqBA,E,uKACP,IAAD,EACgDC,KAAKC,MAAnDC,EADF,EACEA,KAAMC,EADR,EACQA,aAAcC,EADtB,EACsBA,aAAcC,EADpC,EACoCA,SACzC,OACI,yBAAKC,UAAU,uBACX,0BAAMC,SAAUH,GACZ,yBAAKE,UAAU,eACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,0CACX,uBAAGA,UAAU,kBAGrB,2BACAE,KAAK,OACLF,UAAU,eACVG,YAAY,kBACZC,MAAOR,EACPS,SAAUR,KAGd,4BAAQK,KAAK,SACbF,UACID,EACE,iCACA,kCAEDA,EAAW,YAAc,kB,GA1BXO,aCElBC,G,6KACP,IAAD,EAEqCb,KAAKC,MAAxCa,EAFF,EAEEA,MAAOC,EAFT,EAESA,aAAcC,EAFvB,EAEuBA,WAE5B,OACI,wBAAIV,UAAU,uEACV,4BAAKQ,GACL,yBAAKR,UAAU,aACX,0BAAMA,UAAU,oBAAoBW,QAASD,GACzC,uBAAGV,UAAU,gBAEjB,0BAAMA,UAAU,sBAAsBW,QAASF,GAC3C,uBAAGT,UAAU,wB,GAbCM,cCAjBM,E,uKACP,IAAD,EACgDlB,KAAKC,MAAnDkB,EADF,EACEA,MAAOC,EADT,EACSA,UAAWL,EADpB,EACoBA,aAAcC,EADlC,EACkCA,WAEvC,OACI,wBAAIV,UAAU,mBACV,wBAAIA,UAAU,+BAAd,aAEIa,EAAME,KAAI,SAAAnB,GACN,OACI,kBAAC,EAAD,CACAoB,IAAKpB,EAAKqB,GACVT,MAAOZ,EAAKY,MACZC,aAAc,kBAAKA,EAAab,EAAKqB,KACrCP,WAAY,kBAAKA,EAAWd,EAAKqB,UAI7C,4BACAN,QAASG,EACTZ,KAAK,SACLF,UAAU,6CAHV,mB,GAlBsBM,a,wBCIjBY,E,4MACnBC,MAAM,CACJN,MAAM,GACNI,GAAGG,MACHxB,KAAK,GACLG,UAAS,G,EAGXF,aAAe,SAACwB,GACd,EAAKC,SAAS,CACZ1B,KAAKyB,EAAEE,OAAOnB,S,EAIlBN,aAAe,SAACuB,GACdA,EAAEG,iBAEF,IAAMC,EAAU,CACdR,GAAG,EAAKE,MAAMF,GACdT,MAAM,EAAKW,MAAMvB,MAGb8B,EAAY,sBAAO,EAAKP,MAAMN,OAAlB,CAAwBY,IAG1C,EAAKH,SAAS,CACZT,MAAMa,EACN9B,KAAK,GACLqB,GAAGG,MACHrB,UAAU,K,EAIde,UAAY,WACV,EAAKQ,SAAS,CACZT,MAAM,M,EAIVJ,aAAe,SAACQ,GACd,IAAMU,EAAgB,EAAKR,MAAMN,MAAMe,QAAO,SAAAhC,GAAI,OAChDA,EAAKqB,KAAOA,KACd,EAAKK,SAAS,CACZT,MAAOc,K,EAIXjB,WAAa,SAAAO,GACX,IAAMU,EAAgB,EAAKR,MAAMN,MAAMe,QAAO,SAAAhC,GAAI,OAChDA,EAAKqB,KAAOA,KACRY,EAAe,EAAKV,MAAMN,MAAMiB,MAAK,SAAAlC,GAAI,OAC7CA,EAAKqB,KAAOA,KACZ,EAAKK,SAAS,CACZT,MAAOc,EACP/B,KAAMiC,EAAarB,MACnBT,UAAU,EACVkB,GAAIA,K,uDAOR,OACE,yBAAKjB,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,gCACb,wBAAIA,UAAU,+BAAd,cAGF,kBAAC,EAAD,CACEJ,KAAMF,KAAKyB,MAAMvB,KACjBC,aAAcH,KAAKG,aACnBC,aAAcJ,KAAKI,aACnBC,SAAUL,KAAKyB,MAAMpB,WACzB,kBAAC,EAAD,CACEc,MAAOnB,KAAKyB,MAAMN,MAClBC,UAAWpB,KAAKoB,UAChBL,aAAcf,KAAKe,aACnBC,WAAYhB,KAAKgB,oB,GA/EMJ,aCIbyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.27870eeb.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class TodoInput extends Component {\n    render() {\n        const {item, handleChange, handleSubmit, editItem} = this.props\n        return (\n            <div className=\"card card-body my-3\">\n                <form onSubmit={handleSubmit}>\n                    <div className=\"input-group\">\n                        <div className=\"input-group-prepend\">\n                            <div className=\"input-group-text bg-primary text-white\">\n                                <i className=\"fas fa-book\"></i>\n                            </div>\n                        </div>\n                        <input \n                        type=\"text\" \n                        className=\"form-control\"\n                        placeholder=\"add a todo item\"\n                        value={item}\n                        onChange={handleChange}\n                        />\n                    </div>\n                    <button type=\"submit\" \n                    className={\n                        editItem \n                        ? \"btn btn-block btn-success mt-3\"\n                        : \"btn btn-block btn-primary mt-3\"\n                    }>\n                        {editItem ? 'edit item' : 'add item'}\n                    </button>\n                </form>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n\nexport default class TodoItem extends Component {\n    render() {\n\n        const {title, handleDelete, handleEdit} = this.props\n\n        return (\n            <li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\n                <h6>{title}</h6>\n                <div className=\"todo-icon\">\n                    <span className=\"mx-2 text-success\" onClick={handleEdit}>\n                        <i className=\"fas fa-pen\"/>\n                    </span>\n                    <span className=\"mx-2 text-dangerous\" onClick={handleDelete}>\n                        <i className=\"fas fa-trash\"/>\n                    </span>\n                </div>\n            </li>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nimport TodoItem from './TodoItem';\n\nexport default class TodoList extends Component {\n    render() {\n        const {items, clearList, handleDelete, handleEdit} = this.props\n\n        return (\n            <ul className=\"list-group my-5\">\n                <h3 className=\"text-capitalize text-center\">todo list</h3>\n                {\n                    items.map(item => {\n                        return (\n                            <TodoItem \n                            key={item.id} \n                            title={item.title}\n                            handleDelete={()=> handleDelete(item.id)}\n                            handleEdit={()=> handleEdit(item.id)}/>\n                        )\n                    })\n                }\n                <button \n                onClick={clearList}\n                type=\"button\"\n                className=\"btn-danger btn-block text-capitalize mt-5\">\n                    clear list\n                </button>\n            </ul>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport TodoInput from './components/TodoInput';\nimport TodoList from './components/TodoList';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport uuid from 'react-uuid';\n\n\nexport default class App extends Component {\n  state={\n    items:[],\n    id:uuid(),\n    item:'',\n    editItem:false\n  };\n//enables the writing\n  handleChange = (e)=>{\n    this.setState({\n      item:e.target.value\n    });\n  };\n\n  handleSubmit = (e) =>{\n    e.preventDefault();\n\n    const newItem = {\n      id:this.state.id,\n      title:this.state.item\n    }\n\n    const updatedItems = [...this.state.items,newItem];\n\n\n    this.setState({\n      items:updatedItems,\n      item:'',\n      id:uuid(),\n      editItem: false\n    })\n  }\n\n  clearList = () => {\n    this.setState({\n      items:[]\n    })\n  }\n\n  handleDelete = (id) => {\n    const filteredItems = this.state.items.filter(item =>\n      item.id !== id)\n    this.setState({\n      items: filteredItems\n    })\n  }\n\n  handleEdit = id => {\n    const filteredItems = this.state.items.filter(item =>\n      item.id !== id);\n    const selectedItem = this.state.items.find(item => \n      item.id === id);\n      this.setState({\n        items: filteredItems,\n        item: selectedItem.title,\n        editItem: true,\n        id: id\n      })\n  }\n\n  \n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-10 mx-auto col-md-8 mt-4\">\n            <h3 className=\"text-capitalize text-center\">\n              Todo Input\n            </h3>\n          <TodoInput \n            item={this.state.item} \n            handleChange={this.handleChange}\n            handleSubmit={this.handleSubmit}\n            editItem={this.state.editItem}/>\n        <TodoList \n          items={this.state.items} \n          clearList={this.clearList}\n          handleDelete={this.handleDelete}\n          handleEdit={this.handleEdit}/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}